
无状态登陆原理:（即是不用session或cookie的方式实现用户认证）
     1、有状态服务：即服务端需要记录每次会话的客户端信息，从而识别客户端身份，根据用户身份进行请求的处理，
                  典型的设计有Tomcat中的session
        例如登录：用户登录后，我们把登陆者的信息保存在服务端session中，并且给用户一个cookie值，记录对应的session。
                然后下次请求，用户携带cookie值来，我们就能识别对应的session，从而找到用户的信息。
            缺点：服务端保存大量数据，增加服务端压力
                 服务端保存用户状态，无法进行水平扩展
                 客户端请求依赖服务器，多次请求必须访问同一台服务器
     2、无状态登录的流程：
           当客户端第一次请求服务时，服务端对用户进行信息认证(登录)
           认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证
           以后每次请求，客户端都携带认证的token
           服务的对token进行解密，判断是否有效

所以，整个登录过程中，最关键的点就是token的安全性。token是识别客户端身份的唯一标识，如果加密不够严密，被人伪造就完蛋了。
因此我们采用了  JWT+RSA非对称加密

JWT--全称Json Web Token
     1、JWT包含三部分：

             头部：声明类型，加密算法
             Header:{
                "tpy" : 'JWT',
                "alg" : 'HS256'
             }

             装载的数据：用户身份信息，注册声明
             Payload:{
                 "sub" : '1234567890',
                 "name" : 'john',
                 "admin" : true
             }

             验证签名：是整个数据的认证信息
             Signature:{
                  var encdedString = base64UrlEncode(header) + '.' + base64urlEncode(payload);
                  var signature = HMACSHA256(encodedString,'secret');
             }

             Jwt与token最大的区别：
                token依赖于Redis查询数据信息，token存放value数据比较安全的。
                Jwt不需要依赖与服务器端，将数据信息内容直接存放在客户端

             Jwt优点：
                1、无需在服务器存放用户数据，减轻服务器端压力
                2、轻量级、json风格比较简单
                3、跨语言
             Jwt缺点：
                jwt一旦生成后期无法修改：
                1、无法更新jwt有效期
                2、无法销毁一个jwt


     2、流程：
           用户注册-->授权中心(返回一个token给cookie，zuul一个公钥，授权中心一个私钥)
           用户登录-->zuul网关(解析token)-->微服务(解析token)
