
server:
  port: 9090

logging:
  level:
    org:
      springframework:
        security: debug

spring:
  mvc:
    hiddenmethod:
      filter:
        # 启用 HiddenHttpMethodFilter 以支持非GET（POST）的请求
        enabled: true
  application:
    name: demo-server
  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html
    cache: false
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/security_oauth2?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=UTC
    username: root
    password: 131474
  sql:
    init:
      # always: 表示总是执行 schemaLocations 和 dataLocations 声明的脚本
      # embedded: 表示只有是内存数据库（如 H2, HSQLDB）时，会在每次启动时删除并重新创建数据库。
      # never: 表示不执行
      mode: never
      schema-locations:
        - classpath:org/springframework/security/oauth2/server/authorization/client/oauth2-registered-client-schema.sql
        - classpath:org/springframework/security/oauth2/server/authorization/oauth2-authorization-consent-schema.sql
        - classpath:org/springframework/security/oauth2/server/authorization/oauth2-authorization-schema.sql
  security:
    # 用户注册
    user:
      name: admin
      password: 123
    oauth2:
      authorizationserver:
        client:
          # 客户端名称
          myClient:
            registration:
              # 客户端id
              client-id: yjwk
              # 客户端密钥（｛noop｝这种格式的密钥只有授权服务器端需要配置）
              client-secret: 123456
              # 客户端授权模式(client_secret_basic, client_secret_post、private_key_jwt, client_secret_jwt)
              client-authentication-methods:
                # 客户端的client_id和client_secret放在请求头中传递给授权服务器
                - client_secret_basic
              # 授权类型（授权码、刷新token）
              authorization-grant-types:
                - authorization_code
                - refresh_token
              # 客户端回调地址（谨慎使用127.0.0.1）
              redirect-uris:
                - http://127.0.0.1:8080/login/oauth2/code/myClient
                - http://127.0.0.1:8081/login/oauth2/code/myClient
              # 客户端应用首页（谨慎使用127.0.0.1）
              post-logout-redirect-uris:
                - http://127.0.0.1:8080/
              # 授权范围
              scopes:
                # 这是用于OpenId Connect认证协议的scope。OpenId Connect是建立在OAuth2.0之上的身份认证协议，允许客户端应用程序获取用户的唯一标识符。通常，如果你想实现用户登录和认证功能，你会请求"openid"Scope。
                # 用户的唯一标识符
                - openid
                # 这个scope允许客户端应用程序获取用户的基本资料信息，比如姓名、电子邮件地址等。当你需要显示用户的个人资料或者做个性化的用户体验时，可以请求"profile"Scope
                # 用户的个人信息
                - profile
                - pull_requests
                - groups
                - emalls
            # 是否需要"授权确认"
            require-authorization-consent: true