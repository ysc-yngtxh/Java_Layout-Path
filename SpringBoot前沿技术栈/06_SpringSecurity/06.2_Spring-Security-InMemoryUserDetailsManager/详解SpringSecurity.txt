

一、入门案例认证流程
    接口:                                       实现类:
       AbstractAuthenticationProcessingFilter       UsernamePasswordAuthenticationFilter
           ⬇︎                                           ⬇︎
       AuthenticationManager                        ProviderManager
           ⬇︎                                           ⬇︎
       AuthenticationProvider                       DaoAuthenticationProvider
           ⬇︎                                           ⬇︎
       UserDetailsService                           InMemoryUserDetailsManager（JdbcUserDetailsManager）

    UsernamePasswordAuthenticationFilter
        |- attemptAuthentication()方法尝试认证
              |- UsernamePasswordAuthenticationToken包装用户信息
                    |- AuthenticationManager
                          |- authenticate()方法有一个for循环来执行 AuthenticationProvider
                                |- AuthenticationProvider
                                      |- authenticate()方法
                                            |- retrieveUser()方法检索用户名
                                                 |- UserDetailsService
                                                       |- loadUserByUsername()方法
                                            |- additionalAuthenticationChecks()方法检索密码

   表单登录的认证流程
   1、表单提交用户名、密码
   2、表单的请求被 UsernamePasswordAuthenticationFilter 捕获，调用 attemptAuthentication 方法执行响应
   3、将用户名和密码封装到 Authentication（实现类[UsernamePasswordAuthenticationToken]）对象之中。这时候只有用户名和密码，权限还没有。
   4、AuthenticationManager 是认证管理器，它通过 authenticate() 方法发起委托认证，之后由 ProviderManager 根据参数类型，匹配合适的 AuthenticationProvider
   5、AuthenticationProvider 是认证类的提供者，其实现类 DaoAuthenticationProvider 专用于处理 UsernamePasswordAuthenticationToken 的认证请求
   6、DaoAuthenticationProvider 认证类执行 authenticate() 方法，其内部执行以下操作：
      (1)、调用 retrieveUser() 方法实现对用户名的检索。
           retrieveUser()方法中调用 UserDetailsService类的 loadUserByUsername()返回 UserDetails 对象
           ①、UserDetailsService 是用户信息的业务类。
              Ⅰ、其实现类 InMemoryUserDetailsManager 专用于从内存中检索用户信息
              Ⅱ、另外，可自定义其实现类，从数据库中检索用户信息
           ②、UserDetailsService 的实现类功能：
              Ⅰ、根据用户名去查询对应的用户以及这个用户对应的权限信息，InMemoryUserDetailsManager 是在内存中查找，自定义实现类是在数据库中查找。
              Ⅱ、把对应的用户信息包括去权限信息封装成 UserDetails 对象返回
           ③、UserDetails 是用户信息接口，其实现类 User 封装了用户信息，包括用户名、密码、权限信息等。
      (2)、调用 additionalAuthenticationChecks() 方法实现对密码的检索，
           通过 PasswordEncoder 对比 UserDetails 中的密码和 Authentication 的密码是否正确。
      (3)、如果上述的用户名与密码检索都正确，就把 UserDetails 中的权限信息封装到 Authentication（实现类[UsernamePasswordAuthenticationToken]）对象中
   7、返回 Authentication 对象给实现类 UsernamePasswordAuthenticationFilter
      (1)、返回的 Authentication 对象就使用 SecurityContextHolder.getContext().setAuthentication() 方法
           存储到 SecurityContextHolder 对象中，供后续Security的Filter使用。其他过滤器会通过 SecurityContextHolder 来获取当前用户信息。

