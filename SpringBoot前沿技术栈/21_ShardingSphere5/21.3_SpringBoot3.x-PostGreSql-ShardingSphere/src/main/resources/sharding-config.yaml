
# ShardingSphere 配置文件

mode:
  # 设置模式类型： Standalone(单机模式)、Cluster(集群模式). 不配置则默认单机模式
  type: Standalone
# 开启ShardingSphere日志
props:
  sql-show: true

dataSources:
  ds_0:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/smartmatch_ece?currentSchema=smc_ece1
    username: root
    password: 131474
  ds_1:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/smartmatch_ece?currentSchema=smc_ece2
    username: root
    password: 131474
  ds_2:
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5432/smartmatch_ece?currentSchema=smc_ece3
    username: root
    password: 131474


# 单数据库模式
# 使用 PostgreSql 来进行数据分片，有个注意点：public模式中必须要创建分片的表(可以没数据，但必须要建表[ece_user])
# TODO 定义规则
rules:
  - !SHARDING # 分片规则
    tables:
      ece_user:
        # 数据节点：默认只支持两层结构，即【逻辑数据源名.逻辑表名】的形式
        actualDataNodes: ds_$->{0..2}.ece_user
        databaseStrategy: # TODO 数据库分片策略
          standard:
            shardingColumn: ece_id # 根据指定的列名进行分片
            shardingAlgorithmName: database_inline # 使用自定义的分片算法
        keyGenerateStrategy: # TODO 主键生成策略
          column: id
          keyGeneratorName: snowflake
        # tableStrategy: # TODO 表分片策略。如果有需要则配置，没有避免则无需书写，以免报错
        #   standard:
        #     shardingColumn: id
        #     shardingAlgorithmName:
    shardingAlgorithms: # TODO 定义分片算法
      database_inline:  # 自定义分片算法名称，自定义名称【随便取】
        type: INLINE
        props:
          algorithm-expression: ds_$->{ece_id % 3}
    keyGenerators: # TODO 定义主键生成策略
      snowflake:   # 自定义主键生成策略名称，自定义名称【随便取】
        type: SNOWFLAKE
        props:
          worker.id: 1     # 根据实际需要设置不同的 worker.id
          datacenter.id: 1 # 可选，如果不需要可以不设置

  - !READWRITE_SPLITTING
    dataSources:
      readwrite_ds: # 读写分离逻辑数据源名称，自定义名称【随便取】
        writeDataSourceName: ds_0 # 写库数据源名称
        readDataSourceNames: # 读库数据源名称，多个从数据源用逗号分隔
          - ds_1
          - ds_2
        # transactionalReadQueryStrategy: PRIMARY # 事务内读请求的路由策略，可选值：PRIMARY（路由至主库）、FIXED（同一事务内路由至固定数据源）、DYNAMIC（同一事务内路由至非固定数据源）。默认值：DYNAMIC
        loadBalancerName: round_robin # 负载均衡算法名称
    # 负载均衡算法配置
    loadBalancers:
      random: # 负载均衡算法名称，自定义名称【随便取】
        type: RANDOM # 负载均衡算法类型
        props: # 负载均衡算法属性配置
        # ...
      round_robin: # 负载均衡算法名称，自定义名称【随便取】
        type: ROUND_ROBIN # 负载均衡算法类型
        props: # 负载均衡算法属性配置







