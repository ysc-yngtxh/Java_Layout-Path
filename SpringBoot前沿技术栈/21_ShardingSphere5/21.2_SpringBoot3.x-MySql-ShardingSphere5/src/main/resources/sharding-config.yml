
# ShardingSphere 配置文件

mode:
  # 设置模式类型： Standalone(单机模式)、Cluster(集群模式). 不配置则默认单机模式
  type: Standalone
# 开启ShardingSphere日志
props:
  sql-show: true

# 数据源配置
dataSources:
  ds_0:
    driverClassName: com.mysql.cj.jdbc.Driver
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    jdbcUrl: jdbc:mysql://localhost:3306/sys
    username: root
    password: 131474
  ds_1:
    driverClassName: com.mysql.cj.jdbc.Driver
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    jdbcUrl: jdbc:mysql://localhost:3306/springdb
    username: root
    password: 131474
  ds_2:
    driverClassName: com.mysql.cj.jdbc.Driver
    dataSourceClassName: com.zaxxer.hikari.HikariDataSource
    jdbcUrl: jdbc:mysql://localhost:3306/caoyumin
    username: root
    password: 131474


# TODO 定义规则
rules:
  - !SHARDING # 分片规则
    shardingAlgorithms: # TODO 定义分片算法
      database_inline:  # 自定义分片算法名称，自定义名称【随便取】
        type: INLINE
        props:
          algorithm-expression: ds_$->{ece_id % 3}
    keyGenerators: # TODO 定义主键生成策略
      snowflake:   # 自定义主键生成策略名称，自定义名称【随便取】
        type: SNOWFLAKE
        props:
          worker.id: 1     # 根据实际需要设置不同的 worker.id
          datacenter.id: 1 # 可选，如果不需要可以不设置
    tables:
      ece_user: # 逻辑表名称
        actualDataNodes: ds_$->{0..2}.ece_user # 数据节点：默认只支持两层结构，即【逻辑数据源名.逻辑表名】的形式
        databaseStrategy: # TODO 分库策略
          standard: # standard：用于单分片键的标准分片场景
            shardingColumn: ece_id # 分片列名称
            shardingAlgorithmName: database_inline # 分片算法名称
        keyGenerateStrategy: # TODO 主键生成策略
          column: id
          keyGeneratorName: snowflake
        tableStrategy: # TODO 分表策略，同分库策略
          # standard:
          #   shardingColumn:
          #   shardingAlgorithmName:
      ece_order:
        actualDataNodes: ds_$->{0..2}.ece_order
        databaseStrategy:
          complex: # complex：适用于多个分片键的分片场景。
            shardingColumns: ece_id,age # 分片列名称，多个列以逗号分隔
            shardingAlgorithmName: # 分片算法名称
      ece_order:
        actualDataNodes: ds_$->{0..2}.ece_order
        databaseStrategy:
          hint: # Hint：适用于在运行时动态指定分片键值的场景，通常用于无法在 SQL 中明确指定分片键的情况。
            shardingAlgorithmName: # 分片算法名称
      ece_order:
        actualDataNodes: ds_$->{0..2}.ece_order
        databaseStrategy:
          none: # none：适用于不需要分片的表。

  - !READWRITE_SPLITTING   # 读写分离规则
    dataSources:
      readwrite_ds: # 读写分离逻辑数据源名称，自定义名称【随便取】
        writeDataSourceName: ds_0 # 写库数据源名称【只支持单个数据源】
        readDataSourceNames:      # 读库数据源名称，多个从数据源用逗号分隔
          - ds_1
          - ds_2
        # 事务内读请求的路由策略，默认值：DYNAMIC。
        # 可选值：PRIMARY（路由至主库）、FIXED（同一事务内路由至固定数据源）、DYNAMIC（同一事务内路由至非固定数据源）。
        # transactionalReadQueryStrategy: PRIMARY
        loadBalancerName: round_robin # 负载均衡算法名称
    # 负载均衡算法配置
    loadBalancers:
      random: # 负载均衡算法名称，自定义名称【随便取】
        type: RANDOM # 负载均衡算法类型【随机】
        props: # 负载均衡算法属性配置
        # ...
      round_robin: # 负载均衡算法名称，自定义名称【随便取】
        type: ROUND_ROBIN # 负载均衡算法类型【轮询】
        props: # 负载均衡算法属性配置
        # ...

  - !BROADCAST # 广播表规则
    tables:
      - ece_lookup
      - ece_lookup_items

