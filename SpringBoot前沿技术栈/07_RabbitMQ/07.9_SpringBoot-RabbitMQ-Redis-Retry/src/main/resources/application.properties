
server.port=8080
server.servlet.context-path=/

spring.rabbitmq.host=localhost
# 5672是rabbitmq 默认TCP监听端口。所以我们这里的java端口号是5672，而不是15672RabbitMQ的地址
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# none：是禁用发布确认模式，是默认值
# correlated：是发布消息成功到交换器后会触发回调方法
# 设置 correlated 即可在发布消息成功到达交换器(Exchange)后触发回调方法。
spring.rabbitmq.publisher-confirm-type=correlated
# 但消息不可达队列时，mandatory 参数值来决定是返回消息还是直接丢弃消息。true表示返回消息不可达的包装信息[消息体、路由键、失败原因...]。
spring.rabbitmq.template.mandatory=true
# 开启ReturnsCallback监听器来监听 mandatory(消息不可达队列) 返回的消息，如果有返回消息则执行 returnedMessage()
spring.rabbitmq.publisher-returns=true


# 消息确认方式，其有三种配置方式，分别是none、manual(手动ack) 和auto(自动ack) 默认auto
# 默认情况下消息消费者是自动 ack(确认)消息消费了的，如果要手动 ack(确认)则需要修改确认模式为 manual .不设置的话在使用手动确定消息会报错
spring.rabbitmq.listener.simple.acknowledge-mode=manual
# 启用重试（默认是不启用重试机制的）
spring.rabbitmq.listener.simple.retry.enabled=true
# 最大重试次数（默认3）
spring.rabbitmq.listener.simple.retry.max-attempts=5
# 初始重试间隔（默认1秒）
spring.rabbitmq.listener.simple.retry.initial-interval=2000
# 重试间隔乘数（默认1.0）
spring.rabbitmq.listener.simple.retry.multiplier=2.0
# 最大重试间隔（默认无限制）
spring.rabbitmq.listener.simple.retry.max-interval=10000
# 重试耗尽后的处理（默认丢弃）监听器抛出异常而拒绝的消息是否被重新放回队列  true表示会重新放回队列，false表示丢弃
spring.rabbitmq.listener.simple.default-requeue-rejected=false


# RabbitMq消费端配置   同一个队列最小启动几个消费者，相当于同一个@RabbitListener下的线程开启5个
spring.rabbitmq.listener.simple.concurrency=5
# 启用批量消费。默认值为 false，表示不启用批量消费。
spring.rabbitmq.listener.simple.consumer-batch-enabled=true
# 消费者从 Broker 预取的消息数量（存储在客户端内存中），设置合适数值可减少网络往返次数（适合消息处理快的场景）。
spring.rabbitmq.listener.simple.prefetch=250
# 批量传递给 @RabbitListener 的消息数量，消息会以 List<Message> 形式一次性交给业务代码处理。
spring.rabbitmq.listener.simple.batch-size=1
# 消费者最大数量
spring.rabbitmq.listener.simple.max-concurrency=10


# Redis数据库索引（默认为0）
spring.data.redis.database=0
# Redis服务器地址
spring.data.redis.host=localhost
# Redis服务器连接端口
spring.data.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.data.redis.password=
# 链接超时时间 单位 ms（毫秒）
spring.data.redis.timeout=3000
