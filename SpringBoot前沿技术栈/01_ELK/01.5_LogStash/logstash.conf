# Logstash configuration
# TCP - Logstash -> Elasticsearch pipeline.

# 1. 输入：Logstash 作为 TCP 服务端，监听来自 Spring Boot 应用的日志数据
input {
  tcp {
    mode => "server"       # 作为 TCP 服务端监听连接
    host => "127.0.0.1"    # 绑定本地回环地址（仅允许本机连接）
    port => 8081           # 监听端口
    codec => json_lines    # 按行解析 JSON 格式的输入数据
  }
}

# 过滤器，暂时不用管
filter{}

output {
  # 输出到 ElasticSearch
  elasticsearch {
    # 仅允许指定 IP 连接
    hosts => ["https://localhost:9200"]
    # 动态索引名通过 %{+YYYY.MM.dd} 实现按天分片，符合 ELK 最佳实践。
    index => "springboot_logstash_elasticsearch_%{+YYYY.MM.dd}"
    # "%{[@metadata][index_prefix]}-%{+YYYY.MM.dd}"

    # 启用 SSL/TLS
    ssl_enabled => true

    # 指定验证模式（旧版参数，在新版本中被废弃）
    # ssl_certificate_verification => false
    # 指定验证模式在新版中参数为ssl_verification_mode，在生产环境中建议使用 CA 证书验证
    #     "full"	    严格验证证书和主机名（默认值，推荐生产环境使用）
    #     "none"	    禁用 SSL 验证（仅限测试环境，不安全！）
    #     "certificate"	验证证书但不验证主机名（中间选项，适用于特定场景）
    ssl_verification_mode => "full"

    # CA 证书路径（用于验证 ElasticSearch 服务器的证书）
    ssl_certificate_authorities => "/Users/yousc/Development/elk/elasticsearch-9.0.0/config/certs/http_ca.crt"

    # 身份认证（如果 ES 启用了安全认证）
    user => "elastic"
    password => "elastic"
  }
  # 输出命令行控制台
  stdout {
    # rubydebug：输出格式化后的事件内容。可以快速定位数据解析错误（如 _jsonparsefailure）、验证过滤器逻辑，是调试 Logstash 管道的利器
    codec => rubydebug
  }
}
