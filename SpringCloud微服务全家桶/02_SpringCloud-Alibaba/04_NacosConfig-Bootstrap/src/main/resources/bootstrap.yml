spring:
  application:
    name: provider_config
  profiles:
    active: dev
  cloud:
    nacos:
      # 注意⚠️：添加nacos配置中心的客户端依赖的，这里的 discovery 换成 config
      config:
        server-addr: localhost:8848
        username: nacos
        password: nacos
        group: DEFAULT_GROUP
        namespace: public
        # 默认指定的config配置文件类型为properties，现在更改为yaml或者yml。注意拼接的Nacos文件名要一致
        file-extension: yml
        # 同一个group中的不同服务可以共享以下 "共享配置"
        shared-configs[0]:
          data-id: shared_config.yml
          group: DEFAULT_GROUP
          refresh: true
        # 不同group中的不同服务可以共享以下 "扩展配置"
        extension-configs[0]:
          data-id: extension_config.yml
          group: DEFAULT_GROUP
          refresh: true
        extension-configs[1]:
          data-id: extension_config-two.yml
          group: DEFAULT_GROUP
          refresh: true
# 1、工程特定的配置文件：通过工程的应用名来定位的配置文件通常具有最高的优先级。（provider_config-dev.yml）
#    例如：${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}
# 2、扩展配置：项目中可能会依赖其他模块的配置文件，这些依赖的Nacos配置构成了扩展配置（extension-configs）。
#            这些配置文件的优先级次于工程特定的配置文件。
# 3、共享配置文件：某些配置是多个工程或模块共享的，如shared_config.yml，这些公共配置文件在优先级上低于工程特定和扩展配置。
# 4、本地配置文件：例如bootstrap.yml中的配置，在Nacos配置加载完毕后，本地的配置会被加载。如果没有特别设置，本地配置的优先级是最低的。

# 属性优先级顺序从高到低：
# 工程特定配置文件(provider_config-dev.yml) > 扩展配置(extension-configs) > 共享配置(shared-configs) > 本地配置文件(bootstrap.yml)
