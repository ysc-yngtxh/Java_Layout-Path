nacos:
  core:
    size: 3
  max:
    size: 20

spring:
  application:
    name: provider_config
  profiles:
    active: dev
  cloud:
    nacos:
      # 注意⚠️：添加nacos配置中心的客户端依赖的，这里的 discovery 换成 config
      config:
        server-addr: localhost:8848
        username: nacos
        password: nacos
        group: DEFAULT_GROUP
        namespace: public
        # 默认指定的config配置文件类型为properties，现在更改为yaml或者yml。注意拼接的Nacos文件名要一致
        file-extension: yml
        # 同一个group中的不同服务可以共享以下 "共享配置"
        shared-configs[0]:
          data-id: shared_config.yml
          group: DEFAULT_GROUP
          refresh: true
        # 不同group中的不同服务可以共享以下 "扩展配置"
        extension-configs[0]:
          data-id: extension_config.yml
          group: DEFAULT_GROUP
          refresh: true
        extension-configs[1]:
          data-id: extension_config-two.yml
          group: DEFAULT_GROUP
          refresh: true
  # 1、工程特定的配置文件：通过工程的应用名来定位的配置文件通常具有最高的优先级。（provider_config-dev.yml）
  #    例如：${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}
  # 2、扩展配置：项目中可能会依赖其他模块的配置文件，这些依赖的Nacos配置构成了扩展配置（extension-configs）。
  #            这些配置文件的优先级次于工程特定的配置文件。
  # 3、共享配置文件：某些配置是多个工程或模块共享的，如shared_config.yml，这些公共配置文件在优先级上低于工程特定和扩展配置。
  # 4、本地配置文件：例如bootstrap.yaml中的配置，在Nacos配置加载完毕后，本地的配置会被加载。如果没有特别设置，本地配置的优先级是最低的。

  # 配置文件优先级顺序：
  # 工程特定配置文件(provider_config-dev.yml) > 扩展配置(extension-configs) > 共享配置(shared-configs) > 本地配置文件(bootstrap.yml)


  # spring.config.import 属性是 Spring Boot 2.4 及更高版本中引入的一个新特性，它支持在配置加载的早期阶段导入和处理外部配置源。
  # 这允许用户在不使用 bootstrap.properties 或 bootstrap.yml 的情况下，也能轻松地集成和使用外部配置服务，如 Config Server、Nacos 等。
  # Spring Boot 在启动时会解析 application.properties 或 application.yml 文件，并去识别出 spring.config.import 属性。
  # 这个属性会被特别处理，导致在配置加载的早期阶段就被执行导入环境信息Environment中。
  config:
    import:
      # optional 关键字表示如果无法从 Nacos 加载配置，应用不会失败启动。如果省略 optional，那么加载失败会导致应用启动失败。
      # nacos: 表示要从 Nacos 配置中心导入配置。连接：provider_config-dev.yml
      - optional:nacos:${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}
      # 这里出现的一个问题：所谓的共享配置、扩展配置优先级失效。因为application.properties是在NacosConfigProperties实例化之后加载的。
      # 所以，这里就纯粹的是引入多个外部配置源。因此，靠后引入的配置源会覆盖前面外部源中相同配置的属性值
      - optional:nacos:${spring.cloud.nacos.config.shared-configs[0].data-id}
      - optional:nacos:${spring.cloud.nacos.config.extension-configs[0].data-id}
      - optional:nacos:extension_config-two.yml
      - optional:classpath:myDefinition.properties
