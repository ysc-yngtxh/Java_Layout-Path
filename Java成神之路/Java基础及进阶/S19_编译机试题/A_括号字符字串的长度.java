package S19_编译机试题;

import java.util.Scanner;

/**
 * @author 游家纨绔
 * @dateTime 2024-03-27 21:02
 * @apiNote TODO 给定一个括号字符串str，返回最长的能够完全正确匹配括号字符字串的长度。
 */
public class A_括号字符字串的长度 {
    // 例如：((()))    结果为：6  得到是最外层的括号长度   () + (..) + (....) = 2 + 2 + 2 = 6
    // 例如：((()()))  结果为：8  得到是最外层的括号长度   () + () + (....) + (......) = 2 + 2 + 2 + 2 = 8
    // 例如：())       结果为：2  得到是前面完整括号长度   () = 2。'())'则不行，因为会多一个')'，达不到完全匹配
    // 例如：()())     结果为：4  得到是最外层的括号长度   () + () = 2 + 2 = 4。多出的')'没有相匹配的，不纳入长度
    // 例如：())()     结果为：2  得到是单独的括号长度     ()or()。'())()'没能完全匹配括号，多出')'，因此只能单独分开算长度
    // 综上所述：要得到括号字符串str中达到完全匹配的括号字符字串的最长长度，
    //         那么可以定义只要是 () 长度+2，那么 ()() 长度()+()=2+2，还是(()) 长度()+(..)=2+2
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            String s = scanner.nextLine();
            int maxlen = 0;
            int[] cnt = new int[s.length()];
            for (int i = 1; i < s.length(); i++) {
                if (s.charAt(i) == ')') {
                    if (s.charAt(i-1) == '(') {
                        // 进入到这里说明 s[i-1]，s[i] 是一个完整的括号，长度为2。再加 上一个括号子串cnt[i-2] 的值。
                        cnt[i] = (i>2 ? cnt[i-2] : 0) + 2;
                    } else if (i-cnt[i-1]-1 >= 0 && s.charAt(i-cnt[i-1]-1) == '(') {
                        // 进入到这里说明 s[i-1] == ')'，无法与s[i]匹配完整括号，并且不清楚 s[i-1] 的')'是否已经被匹配
                        // 假设s[i-1] 的')'已经匹配，那么 s[i] 要跨越 s[i-1] 匹配的长度cnt[i-1]往前去寻找合适的匹配
                        // 假设s[i-1] 的')'未匹配，那么说明 括号匹配长度就此断开，需要进行下一次循环重新计算长度
                        // 即说明 s[i-cnt[i-1]-1]为'('，那么s[i]可以加2，再加上 cnt[i-1]子串 的值。
                        cnt[i] = cnt[i-1] + 2;
                    }
                }
                maxlen = Math.max(maxlen, cnt[i]);
            }
            System.out.println(maxlen);
        }
        // cnt数组  0    0    2    0    0    4    6    8
        //         (    (    )    (    (    )    )    )
        // 数组下标  0    1    2    3    4    5    6    7
    }
}
