package S19_编译机试题.算法剖析;

/**
 * @Author 游家纨绔
 * @Description TODO
 * @Date 2025-06-06 13:00:00
 */
public class 贪心算法 {
	/*
	 * 贪心算法（greedy algorithm，又称贪婪算法），在对问题求解时，总是做出在当前看来是最好的选择。
	 * 也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。
	 * 贪心算法不是对所有问题都能得到整体最优解，但对范围相当广泛的许多问题他能产生整体最优解或者是整体最优解的近似解。

     * 贪心算法关键是：贪心策略的选择
     * 特性
     * 贪心算法采用自顶向下，以迭代的方法做出相继的贪心选择，每做一次贪心选择就将所求问题简化为一个规模更小的子问题，通过每一步贪心选择，可得到问题的一个最优解，虽然每一步上都要保证能获得局部最优解，但由此产生的全局解有时不一定是最优的，所以贪婪法不要回溯。
     *
     * 能够用贪心算法求解的问题一般具有两个重要特性：贪心选择性质和最优子结构性质
     * 1. 贪心选择性质
     * 所谓贪心选择性质是指所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。这是贪心算法可行的第一个基本要素。贪心算法则通常以自顶向下的方式进行，以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为规模更小的子问题
     * 对于一个具体问题，要确定它是否具有贪心选择性质，必须证明每一步所作的贪心选择最终导致问题的整体最优解。
     * 证明的大致过程为：
     * 首先考察问题的一个整体最优解，并证明可修改这个最优解，使其以贪心选择开始。
     * 做了贪心选择后，原问题简化为规模更小的类似子问题。
     * 然后用数学归纳法证明通过每一步做贪心选择，最终可得到问题的整体最优解。
     * 其中，证明贪心选择后的问题简化为规模更小的类似子问题的关键在于利用该问题的最优子结构性质
     * 2. 最优子结构性质
     * 当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。
     * 3. 贪心算法与动态规划算法的差异
     * 动态规划和贪心算法都是一种递推算法，均有最优子结构性质，通过局部最优解来推导全局最优解。
     * 两者之间的区别在于：
     * 贪心算法中作出的每步贪心决策都无法改变，因为贪心策略是由上一步的最优解推导下一步的最优解，而上一步之前的最优解则不作保留，贪心算法每一步的最优解一定包含上一步的最优解。
     * 动态规划算法中全局最优解中一定包含某个局部最优解，但不一定包含前一个局部最优解，因此需要记录之前的所有最优解。
     * 贪心算法：使用情况
     *  举个例子：
     *   桌面上有 6 张纸币，面额分别为 100，70，50， 20，20，10，现在我们可以拿走 3 张纸币，要求总金额最大，该怎么拿
     *
     * 我相信大家一看到这个问题，肯定就会想着拿最大的那三张就行了，其实这个想法是没错的，但是我们可以把这个想法分解一下：
     * 我们不考虑拿 3 张，我们只考虑拿走一张的最大值（局部最优），那么这个问题就可以拆解为拿三次的情况，第一次拿 100，第二次拿 70，第三次拿 50，那我们最多可以拿 220
	 */
}
