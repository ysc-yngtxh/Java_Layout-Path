给你一个非负整数数组 nums ，你最初位于数组的 第一个下标 。数组中的每个元素代表你在该位置可以跳跃的最大长度。
判断你是否能够到达最后一个下标，如果可以，返回 true ；否则，返回 false 。


示例 1：
输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。

示例 2：

输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

public class 跳跃游戏 {
    public static void main(String[] args) {
        String line = new Scanner(System.in).nextLine();
        String[] arr = line.split(", ");
        int[] array = Arrays.stream(arr).mapToInt(Integer::parseInt).toArray();
        int index = 0;
        int[] sum = {0};
        int[] flag = {0};
        new 跳跃游戏().printArray(array, index, sum, flag);
        System.out.println(flag[0] == 2 ? false : true);
    }

    public void printArray(int[] arr, int index, int[] sum, int[] flag) {
        if (sum[0] == arr.length-1) {
            flag[0]++;
        } else if (sum[0] < arr.length-1) {
            if (arr[index] == 0) {
                flag[0] = 2;
                return;
            }
            sum[0] += arr[index];
            printArray(arr, index+arr[index], sum, flag);
        } else {
            flag[0] = 2;
        }
    }

    方法二：贪心算法
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int rightmost = 0;
        for (int i = 0; i < n; ++i) {
            if (i <= rightmost) {
                rightmost = Math.max(rightmost, i + nums[i]);
                if (rightmost >= n - 1) {
                    return true;
                }
            }
        }
        return false;
    }
}