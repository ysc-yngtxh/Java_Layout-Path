package E5_数组.数组Ⅰ_详解;
/*
 1、Java语言中的数据是一种引用数据类型，不属于基本数据类型，数组的父类是Object.

 2、数组实际上是一个容器，可以同时容纳多个元素（数组是一个数据的集合）

 3、数组当中可以存储“基本数据类型”的数据，也可以存储“引用数据类型”的数据。

 4、数据因为是引用类型，所以以数组是堆内存当中（数组是存储在堆内存当中的）

 5、数组当中如果存储的是“Java对象”的话，实际上存储的是对象的“引用（内存地址）”

 6、数组一旦创建，在Java中规定，长度不可变。（数组长度不变）

 7、数组的分类：一维数组、二维数组、三维数组、多维数组。。。（一维数组较多，二维数组偶尔使用！）

 8、所有的数组要求数组中元素的类型统一。比如int类型数组只能存储int类型，Person类型数组只能存储Person类型

 9、所有的数组对象都有length属性（Java自带的），用来获取数组中元素的个数。

 10、数组在内存方面存储的时候，数组中的元素内存地址（存储的每一个元素都是有规则的挨着排列的）是连续的。内存地址连续
     这是数组存储元素的特点，数组实际上是一种简单的数据结构。
     比如第一个内存地址是0x123,第二个内存地址就是0x124.

 11、所有的数组都是拿“第一个小方框的内存地址”作为整个数组对象的内存地址。（数组中首元素的内存地址作为整个数组对象）

 12、数组中每个元素都是有下标的，下标从0开始，以1递增。最后一个元素的下标是：length-1

 13、数组这种数据结构的优点和缺点：
     优点：查询/查找/检索某个下标上的元素时效率极高。可以说是查询效率最高的一个数据结构。
           为什么检索效率高？
               第一：每一个元素的内存地址在空间存储上是连续。
               第二：每一个元素类型相同，所以占用空间大小一样。
               第三：知道第一个元素内存地址，知道每一个元素占用空间的大小，又知道下标，
                     所以通过一个数学表达式就可以计算出某个下标上元素的内存地址。
                     直接通过内存地址定位元素，所以数组的检索效率是最高的。

               数组中存储100个元素，或者存储100万个元素，在元素查询/检索方面，效率是相同的，
               因为数组中元素查找的时候不会一个一个找，是通过数学表达式计算出来的。（算出一个内存地址，直接定位）
     缺点：
          第一：由于为了保证数组中每个元素的内存地址连续，所以在数组上随即删除或者增加元素的时候，效率较低，
                因为随即增删元素会涉及到后面元素统一向前或者向后位移的操作。
          第二：数组不能存储大数据量，因为很难在内存空间上找到一块特别大的连续的内存空间。

     注意：对于数组中的最后一个元素的增删，是没有效率影响的。

 14、怎么声明/定义一个一维数组？
      语法格式：
              int[] array1;
              double[] array2;
              boolean[] array3;
              String[] array4;
              Object[] array5;
 */
public class 数组1_一维数组内存结构 {

}
