package E5_数组.数组Ⅲ_算法;

import java.util.Arrays;

/* 数组常见算法
 *      1、排序算法：
 *            1️⃣、冒泡排序算法【每一轮循环会把最大的元素放到最后】
 *            2️⃣、选择排序算法【每一轮循环会把最小的元素放到最前面】
 *      2、查找算法：
 *            二分法算法
 *
 *      以上算法在以后的Java实际开发中我们不需要使用。因为Java已经封装好了，直接调用就行
 *      只不过以后的面试的时候，可能会有机会碰上，需要了解其实现原理。
 */
public class 数组10_冒泡排序算法 {

	public static void main(String[] args) {
		int[] arr = {8, 9, 10, 7, 6, 0, 11};
		/*
		 * 第一次循环：
		 *   8, 9, 10, 7, 6, 0, 11 【9>8，  元素不调换】
		 *   8, 9, 10, 7, 6, 0, 11 【10>9， 元素不调换】
		 *   8, 9, 7, 10, 6, 0, 11 【7<10， 元素调换】
		 *   8, 9, 7, 6, 10, 0, 11 【6<10， 元素调换】
		 *   8, 9, 7, 6, 0, 10, 11 【0<10， 元素调换】
		 *   8, 9, 7, 6, 0, 10, 11 【11>10，元素不调换】
		 * 第二次循环：
		 *   8, 9, 7, 6, 0, 10, 11 【9>8，  元素不调换】
		 *   8, 7, 9, 6, 0, 10, 11 【7<9，  元素调换】
		 *   8, 7, 6, 9, 0, 10, 11 【6<9，  元素调换】
		 *   8, 7, 6, 0, 9, 10, 11 【0<9，  元素调换】
		 *   8, 7, 6, 0, 9, 10, 11 【10>9， 元素不调换】
		 *   8, 7, 6, 0, 9, 10, 11 【11>10，元素不调换】
		 * 第三次循环：
		 *   7, 8, 6, 0, 9, 10, 11 【7<8，  元素调换】
		 *   7, 6, 8, 0, 9, 10, 11 【6<8，  元素调换】
		 *   7, 6, 0, 8, 9, 10, 11 【0<8，  元素调换】
		 *   7, 6, 0, 8, 9, 10, 11 【9>8，  元素不调换】
		 *   7, 6, 0, 8, 9, 10, 11 【10>9， 元素不调换】
		 *   7, 6, 0, 8, 9, 10, 11 【11>10，元素不调换】
		 * 第四次循环：
		 *   6, 7, 0, 8, 9, 10, 11 【6<7，  元素调换】
		 *   6, 0, 7, 8, 9, 10, 11 【0<7，  元素调换】
		 *   6, 0, 7, 8, 9, 10, 11 【8>7，  元素不调换】
		 *   6, 0, 7, 8, 9, 10, 11 【9>8，  元素不调换】
		 *   6, 0, 7, 8, 9, 10, 11 【10>9， 元素不调换】
		 *   6, 0, 7, 8, 9, 10, 11 【11>10，元素不调换】
		 * 第五次循环：
		 *   0, 6, 7, 8, 9, 10, 11 【0<6，  元素调换】
		 *   0, 6, 7, 8, 9, 10, 11 【7>6，  元素不调换】
		 *   0, 6, 7, 8, 9, 10, 11 【8>7，  元素不调换】
		 *   0, 6, 7, 8, 9, 10, 11 【9>8，  元素不调换】
		 *   0, 6, 7, 8, 9, 10, 11 【10>9， 元素不调换】
		 *   0, 6, 7, 8, 9, 10, 11 【11>10，元素不调换】
		 * 第六次循环：
		 *   0, 6, 7, 8, 9, 10, 11 【6>0，  元素不调换】
		 *   0, 6, 7, 8, 9, 10, 11 【7>6，  元素不调换】
		 *   0, 6, 7, 8, 9, 10, 11 【8>7，  元素不调换】
		 *   0, 6, 7, 8, 9, 10, 11 【9>8，  元素不调换】
		 *   0, 6, 7, 8, 9, 10, 11 【10>9， 元素不调换】
		 *   0, 6, 7, 8, 9, 10, 11 【11>10，元素不调换】
		 */
		int count = 0; // 记录循环次数
		int count2 = 0;
		// 7条数据，循环6次。这行代码可以循环6次（冒泡排序的外层循环采用这种方式）
		for (int i = 0; i < arr.length - 1; i++) {
			// 这里的循环次数是逐渐减少的，因为最大的数始终是在最后，没必要再和最后的数进行比较
			for (int j = 0; j < arr.length - 1 - i; j++) {
				if (arr[j] > arr[j + 1]) {
					count++;
					// 交换位置。arr[j] 和 arr[j+1] 交换
					int temp; // 建立一个临时的盒子
					temp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = temp;
					count2++;
				}
			}
		}
		System.out.println("比较次数" + count + "; 交换次数" + count2);
		// 输出结果
		System.out.println("冒泡排序方法一排序结果：" + Arrays.toString(arr));

		System.out.println("=========================================================================================");

		/*
		 * 第一次循环：
		 *   8, 9, 10, 7, 6, 0, 11 【9>8，元素不调换】
		 * 第二次循环：
		 *   8, 9, 10, 7, 6, 0, 11 【10>9，元素不调换】
		 * 第三次循环：
		 *   8, 9, 7, 10, 6, 0, 11 【7<10，元素调换】
		 *   8, 7, 9, 10, 6, 0, 11 【7<9，元素调换】
		 *   7, 8, 9, 10, 6, 0, 11 【7<8，元素调换】
		 * 第四次循环：
		 *   7, 8, 9, 6, 10, 0, 11 【6<10，元素调换】
		 *   7, 8, 6, 9, 10, 0, 11 【6<9，元素调换】
		 *   7, 6, 8, 9, 10, 0, 11 【6<8，元素调换】
		 *   6, 7, 8, 9, 10, 0, 11 【6<7，元素调换】
		 * 第五次循环：
		 *   6, 7, 8, 9, 0, 10, 11 【0<10，元素调换】
		 *   6, 7, 8, 0, 9, 10, 11 【0<9，元素调换】
		 *   6, 7, 0, 8, 9, 10, 11 【0<8，元素调换】
		 *   6, 0, 7, 8, 9, 10, 11 【0<7，元素调换】
		 *   0, 6, 7, 8, 9, 10, 11 【0<6，元素调换】
		 * 第六次循环：
		 *   0, 6, 7, 8, 9, 10, 11 【11>10，元素不调换】
		 */
		for (int i = 0; i < arr.length - 1; i++) {
			// 获取比较两数中的后一个数元素值
			int insertVal = arr[i + 1];
			// 前一个数的下标
			int index = i;
			// 如果后一个数比前一个数小   0 6 1 7 4 3
			while (index >= 0 && insertVal < arr[index]) {
				// 将前一个数 arr[index] 向后移动
				arr[index + 1] = arr[index];
				// 让 index 向前移动
				index--;
			}
			// 如果后一个数大于前一个数，下标位置保持不动；如果后一个数小于前一个数，后一个数元素放到前一个数的下标位置上。
			arr[index + 1] = insertVal;
		}
		// 输出结果
		System.out.println("冒泡排序方法二排序结果：" + Arrays.toString(arr));
	}

}
