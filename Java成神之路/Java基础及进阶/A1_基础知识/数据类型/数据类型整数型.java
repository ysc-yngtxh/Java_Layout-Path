package A1_基础知识.数据类型;

/*
1、Java语言当中的“整数型字面值”被默认当作int类型来处理。
   要让这个“整数型字面值”被当作long类型来处理的话，需要在”整数型字面值“后面添加l或L，建议使用大写的L

2、Java语言当中的整数型字面值有三种表达方式：
          第一种方式：十进制【是一种默认的方式】
          第二种方式：八进制【在编写八进制整数型字面值的时候需要以0开始】
          第三种方式：十六进制【在编写十六进制整数型字面值的时候需要以0x开始】
 */
public class 数据类型整数型{
	public static void main(String[] args){
		int a = 10;
		int b = 010;   // 0*8² + 1*8¹ + 0*8⁰ = 0 + 8 + 0 = 8
		int c = 0x10;  // 1*16¹ + 0*16⁰ = 16
		int d = 0xFFA; // 15*16² + 15*16¹ + 10*16⁰ = 255*16 + 15*16 + 10 = 4095 + 240 + 10 = 4335
		System.out.println(a);     // 输出十进制的10
		System.out.println(b);     // 输出八进制的8
		System.out.println(c);     // 输出十六进制的16
		System.out.println(d);     // 输出十六进制的4335
		System.out.println(a+b+c); // 系统会默认输出的十进制34

        // 强制类型转换符
		long x = 456;
		// Java语言当中的“整数型字面值”被默认当作int类型来处理。
		// 小容量可以自动转成大容量，称为自动类型转换机制
		System.out.println(x);
		long y = 2147483647;    // y是long类型，2147483647是int类型。但小容量可以自动转成大容量
		System.out.println(y);
		long z = 2147483648L;   // 2147483648超过int类型取值范围，所以要在数值后面加上l或L。加上L后没有进行类型转换，2147483648L就是long类型。
		System.out.println(z);

		byte i = (byte) 128;    // 这里就是大容量转小容量，需要强转的话就必须指定转换类型
		System.out.println(i);  // 这里输出为-128.原因就在于byte大小范围[-128,127]，所以进行强转类型超过了正数最大值127，往后顺延值为-128
		
		/*什么是原码反码补码
		     例如：
		         原码：1100110011
		         反码：1011001100   除符号位，按位取反
		         补码：1011001101   除符号位，按位取反再加1
		 */		
		long m = 100L;   // 大容量不能直接赋值给小容量，需要加上“强制类型转换符”
		int n = (int) m; // 加上强制转换符之后编译通过了，但是运行阶段可能损失精度。
		System.out.println(n);
		/*强转原理
              long类型8个字节  原始数据：00000000 00000000 00000000 00000000 00000000 00000000 00000000 01100100
              int类型4个字节   强转数据：                                    00000000 00000000 00000000 01100100
		 */
		
		/*
		    k的原始数据：00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000
		    强转后的数据：                                    10000000 00000000 00000000 00000000

		    10000000 00000000 00000000 00000000目前存储在计算机内部，计算机存储数据都是采用补码的形式存储
		    所以10000000 00000000 00000000 00000000现在是一个补码，将以上的补码转换到原码就是最终结果。
            经计算会得到补码与原码一样的结果
		 */
		long k = 2147483648L;
		int e = (int) k;
		System.out.println(e);  // 损失精度严重，结果是负数  【-2147483648】
		
		// 在Java语言当中，当一个整数型字面值没有超出byte类型取值范围的话，该字面值可以直接赋值给byte类型的变量。
		byte j = 50;
		byte p = 127;
		System.out.println(j);
		System.out.println(p);
		/*byte q = 128;
		System.out.println(q);    编译报错：128这个int类型的字面值已经超出byte类型的取值范围，不能直接赋值给byte类型的变量。
		
		原始数据：00000000 00000000 00000000 10000000
		强转之后：10000000【这是存储在计算机内部的一个补码，它的原码是多少结果就是多少（-128）】
		*/
	}
	
}
