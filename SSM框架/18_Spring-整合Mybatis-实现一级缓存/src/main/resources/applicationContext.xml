<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- 指定数据库的配置信息的文件路径。
         作用是将属性文件中的键值对加载到 Spring 的运行时环境中，以便在配置文件中通过占位符（${}）引用这些属性值。
    -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--声明druid(德鲁伊)数据源DataSource，作用是连接数据库的-->
    <!--<bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
    <!--      init-method="init" destroy-method="close">-->
    <!--    <property name="url" value="${jdbc.url}"/>-->
    <!--    <property name="username" value="${jdbc.username}"/>-->
    <!--    <property name="password" value="${jdbc.password}"/>-->
    <!--    <property name="maxActive" value="${jdbc.max}"/>-->
    <!--</bean>-->

    <!--声明数据源DataSource，作用是连接数据库的-->
    <bean id="myDataSource" class="org.apache.ibatis.datasource.pooled.PooledDataSource">
        <property name="driver" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--声明的是Mybatis中提供的 SqlSessionFactoryBean 类，这个类内部创建有 SqlSessionFactory 实例-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库连接池赋给了dataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
        <!-- Mybatis主配置文件的位置
             属性名configLocation是Resource类型，读取配置文件
             属性值value，用于指定文件的路径，使用 classpath:文件路径
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <!-- 创建dao对象，使用SqlSession的getMapper(StudentMapper.class)
         MapperScannerConfigurer::在内部调用getMapper()生成每个dao接口的代理对象
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 指定包名，包含是dao接口所在的包名
             MapperScannerConfigurer会扫描这个包中所有接口，把每个接口都执行一次getMapper()方法，
             得到每个接口的dao对象。创建好的dao对象放入到spring的容器中的。
        -->
        <property name="basePackage" value="com.example.mapper"/>
    </bean>

    <!--以上的语句相当于模板，可以固定，不需要死记硬背，只做理解！！！当然能记住更好-->

    <!--声明service-->
    <bean id="studentService" class="com.example.service.StudentServiceImpl">
        <property name="studentMapper" ref="studentMapper"/>
    </bean>

    <!--1、使用spring的事务处理：声明事务处理器[和源代码完全分离]-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--连接的数据库，指定数据源-->
        <property name="dataSource" ref="myDataSource"/>
    </bean>
    <!--2、开启事务注解驱动，告诉spring使用注解管理事务，创建代理对象-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>
