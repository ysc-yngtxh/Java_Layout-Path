<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 声明：注册 SpringMVC 的核心对象 DispatcherServlet（注册中央调度器）
              需要在Tomcat服务器启动后，创建DispatcherServlet对象的实例。

        为什么要创建 DispatcherServlet 对象的实例呢？
          因为 DispatcherServlet 在它的创建过程中，会同时创建 SpringMVC 容器对象，
          读取 SpringMVC 的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时就可以直接使用对象了

        servlet的初始化会执行 init() 方法。DispatcherServlet在 init() 中 {
             // 创建容器，读取配置文件
             WebApplicationContext ac = new ClassPathXmlApplicationContext("springmvc.xml");
             // 把容器对象放入到ServletContext中
             getServletContext().setAttribute(ket, ac);
        }
    -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--DispatcherServlet初始化参数配置：定义 SpringMVC 读取的配置文件的位置-->
        <init-param>
            <!--设定上下文的参数名称。FrameworkServlet 类中已固定的变量名：contextConfigLocation-->
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value> <!--设定的参数名称的值。对应配置文件的路径-->
        </init-param>

        <!--load-on-startup：表示Tomcat启动后创建对象的顺序。他的值是整数，数值越小，Tomcat创建对象的时间越早。-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>springmvc</servlet-name> <!--servlet映射名称-->
        <url-pattern>*.do</url-pattern>        <!--匹配访问路径 URL-->
    </servlet-mapping>


    <!--注册声明过滤器，解决post乱码问题-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--设置项目中使用的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <!--强制请求对象(HttpServletRequest)使用encoding编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制应答对象(HttpServletRequest) 使用encoding编码的值-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <!--  /*:表示强制所有的请求先通过过滤器处理  -->
        <url-pattern>/*</url-pattern>
    </filter-mapping>
</web-app>
