<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    <!--
        sql映射文件(sql mapper)：写sql语句的，mybatis会执行这些sql
        1、指定约束文件
           <?xml version="1.0" encoding="UTF-8" ?>
           <!DOCTYPE mapper
                  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
                  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
           mybatis-3-mapper.dtd是约束文件的名称，扩展名是dtd的。
        2、约束文件作用：限制，检查在当前文件中出现的标签，属性必须符合mybatis的要求。
        3、mapper是当前文件的根标签，必须的。
           namespace：叫做命名空间，唯一值的，可以是自定义的字符串。
                      要求你使用dao接口的全限定名称
        4、在当前文件中，可以使用特定的标签，表示数据库的特定操作。
           <select>:表示执行查询，select语句
           <update>:表示更新数据库的操作，就是在<update>标签中 写的是update sql语句
           <insert>:表示插入：放的是insert语句
           <delete>:表示删除，执行的是delete语句
    -->
<mapper namespace="com.example.dao.StudentDao">
    <!--
        select:表示查询操作。
        id:你要执行的sql语法的唯一标识，mybatis会使用这个id的值来找到要执行的sql语句
           可以自定义，但是要求你使用接口中的方法名称

        resultType:表示结果类型的，是sql语句执行后得到ResultSet，得到Java对象的类型
                   值写的类型是全限定名称
    -->
    <select id="selectStudents" resultType="com.example.domain.Student">
        select id,name,email,age from student order by id
    </select>


    <insert id="insertStudent" useGeneratedKeys="true" keyProperty="id">
        insert into student values(#{id}, #{name}, #{email}, #{age})
    </insert>
    <!--
        useGeneratedKeys = true 这个表示插入数据之后返回一个自增的主键id给你对应实体类中的主键属性。
                                通过这个设置可以解决在主键自增的情况下通过实体的getter方法获取主键
                               （当然还需要keyProperty指明数据库中返回的主键id给实体类中的哪个属性）。
        keyProperty = 主键，这样就可以解决在主键自增的情况下获取主键。
        一般来说，加上这两个设置后。#{id}就可以删掉
    -->
</mapper>