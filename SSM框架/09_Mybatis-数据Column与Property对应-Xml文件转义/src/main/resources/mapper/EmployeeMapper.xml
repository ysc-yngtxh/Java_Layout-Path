<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.EmployeeMapper">

    <resultMap type="com.example.entity.Employee" id="EmployeeMap">
        <result column="employee_id" property="employeeId" jdbcType="INTEGER"/>
        <result column="employee_name" property="employeeName" jdbcType="VARCHAR"/>
        <result column="employee_department_id" property="employeeDepartmentId" jdbcType="INTEGER"/>
        <result column="employee_grade_id" property="employeeGradeId" jdbcType="INTEGER"/>
        <result column="employee_salary" property="employeeSalary" jdbcType="INTEGER"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="EmployeeMap">
        select
          employee_id,employee_name,employee_department_id,employee_grade_id,employee_salary
        from ssm_employee
        where employee_id = #{employeeId}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultType="com.example.entity.Employee">
        select
          employee_id,employee_name,employee_department_id,employee_grade_id,employee_salary
        from ssm_employee
        <where>
            <if test="Employee.employeeId != null">
                and employee_id = #{Employee.employeeId}
            </if>
            <if test="Employee.employeeName != null and Employee.employeeName != ''">
                and employee_name = #{Employee.employeeName}
            </if>
            <if test="Employee.employeeDepartmentId != null">
                and employee_department_id = #{Employee.employeeDepartmentId}
            </if>
            <if test="Employee.employeeGradeId != null">
                and employee_grade_id = #{Employee.employeeGradeId}
            </if>
            <if test="Employee.employeeSalary != null">
                and employee_salary = #{Employee.employeeSalary}
            </if>
        </where>
        limit #{offset}, #{size}
    </select>

    <select id="findById" resultMap="EmployeeMap">
        select *
        from ssm_employee
        <where>
            <if test="Employee.employeeId != null">
                and employee_id >= #{Employee.employeeId}
            </if>
            <if test="Employee.employeeGradeId != null">
                <!-- 在 XML 文件中，小于号 '<' 是一个特殊的字符，因为它用于标记 XML 标签的开始。
                     小于号'<' 可以看成是标签的 '<'左符号，所以需要通过转义，使其能够正常解析成 Sql 语句。-->
                <!-- and employee_grade_id < #{Employee.employeeGradeId} -->
            </if>
            <if test="Employee.employeeSalary != null">
                ### 第一种方式：使用xml 原生转义的方式进行转义
                and employee_salary &lt; #{Employee.employeeSalary}
            </if>
            <if test="Employee.employeeSalary != null">
                ### 第二种方式：使用 <![CDATA[ 内容 ]]> 转义
                and employee_salary <![CDATA[ < ]]> #{Employee.employeeSalary}
            </if>
        </where>
    </select>

    <!--方法一：使用xml 原生转义的方式进行转义-->
    <!--TODO 字符名称	sql符号	 转义字符   -->
    <!--     大于号	      >	       &gt;    -->
    <!--     小于号	      <	       &lt;    -->
    <!--     不等于	      <>	   &lt;&gt;-->
    <!--     大于等于号	  >=	   &gt;=   -->
    <!--     小于等于号	  <=	   &lt;=   -->
    <!--     与	          &	       &amp;   -->
    <!--     单引号	      '	       &apos;  -->
    <!--     双引号	      "	       &quot;  -->

    <!--方法二：使用 <![CDATA[ 内容 ]]> -->
    <!--在 xml 格式中，当遇到 <![CDATA[ ]]> 这种格式时，会把方块中的内容直接输出，不做任何的解析转义-->
</mapper>
