<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- TODO Setter方法注入方式 在 Spring 中是不会产生循环依赖问题的，这主要是靠 三级缓存 机制-->
    <bean id="aService" class="com.example.service.AService">
        <property name="bService" ref="bService"/>
    </bean>

    <bean id="bService" class="com.example.service.BService">
        <property name="aService" ref="aService"/>
    </bean>


    <!-- TODO 构造器注入 发生在 实例化阶段，而 Spring 解决循环依赖问题依靠的 三级缓存 在 属性注入阶段
              也就是说，调用构造函数时还未能放入三级缓存中，所以无法解决 构造器注入 的循环依赖问题。-->
    <!--<bean id="aService" class="com.example.service.AService">-->
    <!--    <constructor-arg name="bService" ref="bService"/>-->
    <!--</bean>-->

    <!--<bean id="bService" class="com.example.service.BService">-->
    <!--    <constructor-arg name="aService" ref="aService"/>-->
    <!--</bean>-->


    <!-- TODO 多例下，Setter方式注入也会存在循环依赖问题无法解决 -->
    <!--<bean id="aService" class="com.example.service.AService" scope="prototype">-->
    <!--    <property name="bService" ref="bService"/>-->
    <!--</bean>-->

    <!--<bean id="bService" class="com.example.service.BService" scope="prototype">-->
    <!--    <property name="aService" ref="aService"/>-->
    <!--</bean>-->

    <!--TODO 开启 Aop
        aspectj-autoproxy：会把Spring容器中的所有目标对象，一次性都生成代理对象
        proxy-target-class="true"：表示要使用cglib动态代理。默认值为false，表示使用的jdk动态代理，除非代理对象没有接口
        expose-proxy="true"：表示暴露当前代理对象为ThreadLocal模式。可以使用AopContext.currentProxy()方法获取方法内部调用的代理对象
    -->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true" />


    <!--TODO 扫描具有 @Component 注解的aop类-->
    <context:component-scan base-package="com.example"/>
</beans>