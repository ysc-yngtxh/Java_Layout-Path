<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    sql映射文件(sql mapper)：写sql语句的，mybatis会执行这些sql
    1、指定约束文件
       <?xml version="1.0" encoding="UTF-8" ?>
       <!DOCTYPE mapper
              PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
              "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

      mybatis-3-mapper.dtd是约束文件的名称，扩展名是dtd的。
    2、约束文件作用：限制，检查在当前文件中出现的标签，属性必须符合mybatis的要求。
    3、mapper是当前文件的根标签，必须的。
       namespace：叫做命名空间，唯一值的，可以是自定义的字符串。
                  要求你使用dao接口的全限定名称
    4、在当前文件中，可以使用特定的标签，表示数据库的特定操作。
       <select>:表示执行查询，select语句
       <update>:表示更新数据库的操作，就是在<update>标签中 写的是update sql语句
       <insert>:表示插入：放的是insert语句
       <delete>:表示删除，执行的是delete语句
-->
<mapper namespace="com.example.dao.StudentDao">
    <!--
        <if:test="使用参数Java对象的属性值作为判断条件，语法  属性=XXX值">
    -->
    <select id="selectStudentIf" resultType="com.example.domain.Student">
        select id,name,email,age from student
        where 1=1   <!--加上'1=1',是为了避免第一条的if语句不执行时，第二条if语句中的'and'或'or'造成语法上的错误-->
        <if test="name!=null and name!='' ">
            and name=#{name}
        </if>
        <if test="age>0">
            and age>#{age}
        </if>
    </select>

    <!--
        <where> <if> </if> </where>
    -->
    <select id="selectStudentWhere" resultType="com.example.domain.Student">
        select id,name,email,age from student
        <where>
            <if test="name!=null and name!='' ">
                name=#{name}
            </if>
            <if test="age>0">
                and age>#{age}
            </if>
        </where>
    </select>

    <!--foreach使用， List<Integer>
          collection：表示遍历的是集合<List>或者数组<Array>，该属性的值应该与传递给Mapper方法的参数名称相对应。
          问题：但是在该示例中 collection 属性的值是 "list"，而不是方法参数 "idList"。
          回答：这是因为在 MyBatis 中，当传递一个单一的集合<List>或数组<Array>作为参数给 Mapper 方法时，
               MyBatis 会默认将这个参数视为一个名为 "list" 集合或者 "array" 数组，
               除非使用 @Param 注解在传参上指定一个不同的名称。
    -->
    <select id="selectForEachOne" resultType="com.example.domain.Student">
        select * from student where id in
        <foreach collection="list" item="myId" open="(" close=")" separator=",">
            #{myId}
        </foreach>
    </select>

    <!--传递数组作为参数给 Mapper 方法，MyBatis 会默认将这个参数视为一个名为 "array" 的数组-->
    <select id="selectForEachTwo" resultType="com.example.domain.Student">
        select * from student where id in
        <foreach collection="array" item="myId" open="(" close=")" separator=",">
            #{myId}
        </foreach>
    </select>

    <select id="selectForEachThree" resultType="com.example.domain.Student">
        select * from student where id in(  <!--open="(" close=")"可以省略，直接在sql语句中进行拼接-->
        <foreach collection="stuList" item="stu" separator=","> <!--这里使用 @Param 注解，指定了传参名-->
            #{stu.id} <!--这里遍历后是个Java对象，可以通过.的方式获取属性-->
        </foreach>
        )
    </select>

    <!--动态sql-代码片段-->
    <sql id="selectSql">
        select id,name,email,age from student
    </sql>
    <!--以下代码是复制上面的，只用于理解，不做测试使用
    <select id="selectForEachTwo" resultType="com.example.Student">
        <include refid="selectSql"/> where id in (
        <foreach collection="list" item="stu" separator=",">
            #{stu.id}
        </foreach>
        )
    </select>
    -->

    <!--查询所有-->
    <select id="selectAll" resultType="com.example.domain.Student">
        select * from student order by id
    </select>

    <!--根据ID查询的一级缓存-->
    <select id="selectIdOne" parameterType="Integer" resultType="com.example.domain.Student">
        select * from student where id=#{id}
    </select>

    <!--根据ID查询的二级缓存-->
    <cache/> <!--开启二级缓存-->
    <select id="selectIdTwo" parameterType="Integer" resultType="com.example.domain.Student">
        select * from student where id=#{id}
    </select>

</mapper>