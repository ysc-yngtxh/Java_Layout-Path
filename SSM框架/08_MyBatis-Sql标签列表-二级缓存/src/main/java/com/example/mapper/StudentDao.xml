<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    sql映射文件(sql mapper)：写sql语句的，mybatis会执行这些sql
    1、指定约束文件
       <?xml version="1.0" encoding="UTF-8" ?>
       <!DOCTYPE mapper
              PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
              "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

      mybatis-3-mapper.dtd是约束文件的名称，扩展名是dtd的。
    2、约束文件作用：限制，检查在当前文件中出现的标签，属性必须符合mybatis的要求。
    3、mapper是当前文件的根标签，必须的。
       namespace：叫做命名空间，唯一值的，可以是自定义的字符串。
                  要求你使用dao接口的全限定名称
    4、在当前文件中，可以使用特定的标签，表示数据库的特定操作。
       <select>：表示执行查询，select语句
       <update>：表示更新数据库的操作，就是在<update>标签中 写的是update sql语句
       <insert>：表示插入，放的是insert语句
       <delete>：表示删除，执行的是delete语句
-->
<mapper namespace="com.example.mapper.StudentDao">
    <!--
        <if test="使用参数Java对象的属性值作为判断条件，语法：属性=XXX值">
        缺陷：存在 where 语句时
             1、当所有的 if 标签都不符合时，where 语句后没有任何条件，那么这条Sql语句是有问题的
             2、当第一条的 if 标签不符合，第二条if标签符合条件时，那么第二条if标签中的 and|or 会造成语法上的错误
        解决：原始的在 where 语句后手动拼接 1=1
    -->
    <select id="selectStudentIf" resultType="com.example.pojo.Student">
        select id,name,email,age from student
        where 1=1
        <if test="name!=null and name!='' ">
            and name=#{name}
        </if>
        <if test="age>0">
            and age>#{age}
        </if>
    </select>

    <!--
        <where> <if> </if> </where>
        where 标签的作用：【<set>...</set> 标签效果与 <where>...</where> 相同】
            1、如果 <where>...</where> 中包含的子标签中有返回值的话，它就插入一个‘where’。否则不插入。
            2、如果 <where>...</where> 标签返回的内容是以 AND|OR 开头的，则它会剔除掉。
    -->
    <select id="selectStudentWhere" resultType="com.example.pojo.Student">
        select id,name,email,age from student
        <where>
            <if test="name!=null and name!='' ">
                and name=#{name}
            </if>
            <if test="age>0">
                and age>#{age}
            </if>
        </where>
    </select>

    <!--
        <trim> <if> </if> </trim> 是更灵活的去处多余关键字的标签，他可以实践<where>和<set>的效果。
        <trim>标签属性：prefix(前缀)、suffix(后缀)
                      prefixOverrides(前缀覆盖)：作用是移除 SQL 片段中开头部分指定的多余字符或关键字
                      suffixOverrides(后缀覆盖)：作用是移除 SQL 片段中结尾部分指定的多余字符或关键字

    -->
    <select id="selectStudentTrim" resultType="com.example.pojo.Student">
        select id,name,email,age from student
        <trim prefix="where" prefixOverrides="AND|OR">
            <if test="name!=null and name!='' ">
                AND name like concat('%', #{name,jdbcType=VARCHAR}, '%')
            </if>
            <if test="age>0">
                AND age > #{age, jdbcType=INTEGER}
            </if>
            <if test="email!=null and email!='' ">
                OR email = #{email, jdbcType=VARCHAR}
            </if>
        </trim>
    </select>

    <!--
        <choose> ( <when>, <otherwise> )标签
        <choose>标签是按顺序判断其内部when标签中的test条件出否成立，如果有一个成立，则 choose 结束。
        当 <choose> 中所有 <when> 的条件都不满则时，则执行 otherwise 中的sql。
        类似于Java 的 switch 语句，choose 为 switch，when 为 case，otherwise 则为 default。
    -->
    <select id="selectStudentChoose" resultType="com.example.pojo.Student">
        select * from student
        <where>
            <choose>
                <when test="name!=null and name!=''">
                    AND name like concat('%', #{name,jdbcType=VARCHAR}, '%')
                </when >
                <when test="age==10">
                    AND age = #{age, jdbcType=INTEGER}
                </when >
                <when test="email!=null and email!=''">
                    OR email = #{email, jdbcType=VARCHAR}
                </when >
                <otherwise>
                    AND id = 1
                </otherwise>
            </choose>
        </where>
    </select>

    <!--foreach使用：
          item：      集合中元素迭代时的别名，
          index：     集合中元素迭代时的索引
          open：      常用语where语句中，表示以什么开始，比如以'('开始
          separator： 表示在每次进行迭代时的分隔符，
          close：     常用语where语句中，表示以什么结束，
          collection：表示遍历的是集合<List>或者数组<Array>，该属性的值应该与传递给Mapper方法的参数名称相对应。
          问题：在以下示例中为什么 collection 属性的值是 "list"，而不是对应的方法参数 "idList" ？
          回答：这是因为在 MyBatis 中，当传递一个单一的集合<List>或数组<Array>作为参数给 Mapper 方法时，
               MyBatis 会默认将这个参数视为一个名为 "list" 集合或者 "array" 数组，
               除非使用 @Param 注解在传参上指定一个不同的名称，这时 collection 属性的值就应与Mapper方法的参数名称相对应。
    -->
    <select id="selectForEachOne" resultType="com.example.pojo.Student">
        select * from student where id in
        <foreach collection="list" item="myId" open="(" close=")" separator=",">
            #{myId}
        </foreach>
    </select>

    <!--传递数组作为参数给 Mapper 方法，MyBatis 会默认将这个参数视为一个名为 "array" 的数组-->
    <select id="selectForEachTwo" resultType="com.example.pojo.Student">
        select * from student where id in
        <foreach collection="array" item="myId" open="(" close=")" separator=",">
            #{myId}
        </foreach>
    </select>

    <select id="selectForEachThree" resultType="com.example.pojo.Student">
        select * from student where id in(  <!--open="(" close=")"可以省略，直接在sql语句中进行拼接-->
        <foreach collection="stuList" item="stu" separator=","> <!--这里使用 @Param 注解，指定了传参名-->
            #{stu.id} <!--这里遍历后是个Java对象，可以通过.的方式获取属性-->
        </foreach>
        )
    </select>

    <!--动态sql-代码片段-->
    <sql id="selectSql">
        select id,name,email,age from student
    </sql>
    <!--以下代码是复制上面的，只用于理解，不做测试使用
    <select id="selectForEachTwo" resultType="com.example.Student">
        <include refid="selectSql"/> where id in
        (
           <foreach collection="list" item="stu" separator=",">
               #{stu.id}
           </foreach>
        )
    </select>
    -->

    <!--查询所有-->
    <select id="selectAll" resultType="com.example.pojo.Student">
        select * from student order by id
    </select>

    <!--根据Id查询的一级缓存-->
    <select id="selectIdOne" parameterType="Integer" resultType="com.example.pojo.Student">
        select * from student where id=#{id}
    </select>

    <!--根据ID查询的二级缓存-->
    <cache/> <!--开启二级缓存-->
    <select id="selectIdTwo" parameterType="Integer" resultType="com.example.pojo.Student">
        select * from student where id=#{id}
    </select>

</mapper>
