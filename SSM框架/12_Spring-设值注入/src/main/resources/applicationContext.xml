<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="myStudent" class="com.example.pojo.Student">
        <property name="name" value="李四"/>  <!-- 相当于调用Student的setName("李四") -->
        <property name="age" value="23"/>    <!-- 相当于调用Student的setAge(23) -->
        <!--我们想一想，为什么在这里会调用set方法啊？

            我们看看正常情况下调用对象赋值步骤：
               Student st = new Student();
               st.setName("李四");
               st.setAge(23);
            懂了吧！Spring框架在创建对象，调用其方法是万变不离其宗。
        -->
        <property name="email" value="lisi@163.com"/>
        <!--注意思考!
            为什么Student类中没有定义email属性，却可以正常运行呢？

            因为，property这条语句在执行时，调用的是setEmail("lisi@163.com")
            虽然在Student中没有定义email属性，但是存在其setEmail方法，一样可以正常调用运行
        -->
    </bean>

    <!--引用类型的set注入-->
    <bean id="myStudentBy" class="com.example.pojo.Student">
        <property name="name" value="游家纨绔"/>
        <property name="age" value="23"/>
        <property name="school" ref="mySchool"/>
    </bean>

    <!--声明School对象-->
    <bean id="mySchool" class="com.example.pojo.School">
        <property name="name" value="湖北武汉"/>
        <property name="address" value="华中科技大学"/>
        <property name="arrayList">  <!--List标签：注入集合-->
            <list>
                <value>hello</value>
                <value>你好</value>
                <value>1234</value>
            </list>
        </property>
        <property name="arrays">  <!--Array标签：注入数组-->
            <array>
                <value>笨笨</value>
            </array>
        </property>
        <property name="hashMap">  <!--Map标签：注入Map类型的集合-->
            <map>
                <entry key="小朋友" value="小曹"/>
            </map>
        </property>
    </bean>


    <!--使用name表示构造方法的形参名-->
    <bean id="myStudentByIn1" class="com.example.pojo.Student">
        <constructor-arg name="myName" value="张三"/>
        <constructor-arg name="myAge" value="26"/>
        <constructor-arg name="mySchool" ref="mySchool"/>
    </bean>

    <!--使用index表示构造方法的形参名-->
    <bean id="myStudentByIn2" class="com.example.pojo.Student">
        <constructor-arg index="0" value="王五"/>
        <constructor-arg index="1" value="28"/>
        <constructor-arg index="2" ref="mySchool"/>
    </bean>

    <!--省略index也可表示构造方法的形参名-->
    <bean id="myStudentByIn3" class="com.example.pojo.Student">
        <constructor-arg value="赵六"/>
        <constructor-arg value="30"/>
        <constructor-arg ref="mySchool"/>
    </bean>


    <!--创建File，使用构造注入-->
    <bean id="myFile" class="java.io.File">
        <constructor-arg name="parent" value="14_Spring-设值注入"/><!--父类方法目录-->
        <constructor-arg name="child" value="14_Spring-设值注入.iml"/><!--子类文件-->
    </bean>
</beans>
