spring.application.name=${project.artifactId}

# 这里可以看到Spring默认的Aop代理是实现的 Cglib，即默认值为true
spring.aop.proxy-target-class=true

# 那么，为什么Spring要使用 Cglib 作为Aop动态代理的实现方式，而不使用 jdk的动态代理呢？
# 因为，使用jdk的动态代理是基于接口的，如果目标类没有实现接口，那么就不能使用 jdk的动态代理。
#      但是有时候我们会在实现类上加一些自定义或者已有注解，想要通过Aop进行额外逻辑，但是却获取不到这些注解，
#      因为代理的是接口类，并非是实现类，所以是获取不到实现类上的注解的。
#      这也是Spring官方使用 Cglib 作为Aop动态代理的实现方式的主要原因。
