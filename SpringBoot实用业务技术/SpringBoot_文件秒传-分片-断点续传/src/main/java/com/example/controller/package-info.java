package com.example.controller;

/**
 * 分片上传：可以说是我们整个项目的基础，像断点续传、暂停这些都是需要用到分片。
 *  前端需要根据固定大小对文件进行分片，并且请求中要带上分片序号和大小。前端发送请求顺利到达后台后，
 *  服务器只需要按照请求数据中给的分片序号和每片分块大小（分片大小是固定且一样的）算出开始位置，与读取到的文件片段数据，
 *  写入文件即可。
 *
 * 秒传功能
 *  其实就是检验文件的MD5值，前端在发送请求到服务器前，先获取文件内容MD5值或者部分取值MD5，然后再在匹配服务器上的数据。
 *  查询该MD5是否已经存在（我在该项目中用redis来存储数据，用文件MD5值来作key，value是文件存储的地址）
 *  接口返回检查状态，然后再进行下一步的操作。
 *     前端的MD5取值使用 webuploader 自带的功能，这还是个不错的工具。
 *
 * 断点续传
 *  1、就是在文件上传的过程中发生了中断、人为因素（暂停）或者不可抗力（断网或者网络差）导致了文件上传到一半失败了。
 *     然后在环境恢复的时候，重新上传该文件，而不至于是重新开始上传的。
 *  2、断点续传的功能是基于分片上传来实现的，把一个大文件分成很多个小块，服务端能够把每个上传成功的分块都落地下来，
 *     客户端在上传文件开始时调用接口快速验证，条件选择跳过某个分块。
 *  实现原理：就是在每个文件上传前，就获取到文件MD5取值，在上传文件前调用接口
 *          如果获取的文件状态是未完成，则返回所有的还没上传的分块的编号，然后前端进行条件筛算出哪些没上传的分块，然后进行上传。
 */